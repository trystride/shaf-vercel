generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum EmailFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
}

enum SubscriptionStatus {
  active
  cancelled
  expired
  trial
}

enum BillingCycle {
  monthly
  yearly
  trial
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String?  @default("USER")
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  accepted  Boolean  @default(false)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?                @unique
  passwordResetTokenExp DateTime?
  role                  String?                @default("USER")
  customerId            String?                @unique @map(name: "customer_id")
  subscriptionId        String?                @unique @map(name: "subscription_id")
  priceId               String?                @map(name: "price_id")
  currentPeriodEnd      DateTime?              @map(name: "current_period_end")
  createdAt             DateTime               @default(now())
  accounts              Account[]
  sessions              Session[]
  apiKeys               ApiKey[]
  invitation            Invitation[]
  keywords              Keyword[]
  subscriptions         Subscription[]
  notificationPreference NotificationPreference?
  digestQueues          DigestQueue[]
  notificationHistory   NotificationHistory[]
}

model Keyword {
  id          String    @id @default(cuid())
  term        String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  matches     Match[]
  enabled     Boolean   @default(true)

  @@index([userId])
}

model Match {
  id             String       @id @default(cuid())
  keywordId      String
  keyword        Keyword      @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  digestQueues   DigestQueue[] @relation("DigestQueueToMatch")
  notifications  NotificationHistory[] @relation("NotificationHistoryToMatch")

  @@index([keywordId])
  @@index([announcementId])
}

model Announcement {
  id               String     @id @default(cuid())
  annId            String     @unique
  title            String     @db.Text
  description      String     @db.Text
  announcementUrl  String     @db.Text
  publishDate      DateTime
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  matches          Match[]

  @@index([publishDate])
}

model Subscription {
  id           String                @id @default(cuid())
  userId       String                @unique
  planId       String
  status       SubscriptionStatus    @default(trial)
  billingCycle BillingCycle
  startDate    DateTime              @default(now())
  endDate      DateTime?
  trialEndsAt  DateTime?
  cancelledAt  DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  features     SubscriptionFeature[]
  transactions Transaction[]

  @@index([userId, status])
}

model SubscriptionFeature {
  id             String       @id @default(cuid())
  subscriptionId String
  name           String
  enabled        Boolean      @default(true)
  limit          Int?
  used           Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model Transaction {
  id                   String       @id @default(cuid())
  subscriptionId       String
  amount               Decimal
  currency             String       @default("USD")
  status               String
  paylinkTransactionId String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  subscription         Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model NotificationPreference {
  id                    String         @id @default(cuid())
  userId                String         @unique
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailEnabled          Boolean        @default(true)
  emailFrequency        EmailFrequency @default(IMMEDIATE)
  emailDigestDay        String?        // For WEEKLY: MONDAY, TUESDAY, etc.
  emailDigestTime       String?        // HH:mm format
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model DigestQueue {
  id           String         @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches      Match[]       @relation("DigestQueueToMatch")
  frequency    EmailFrequency // DAILY or WEEKLY
  scheduledFor DateTime
  sent         Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@index([scheduledFor])
}

model NotificationHistory {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            String   // EMAIL, EMAIL_DIGEST
  status          String   // SENT, FAILED
  subject         String
  content         String   @db.Text
  sentAt          DateTime @default(now())
  error           String?
  matches         Match[]  @relation("NotificationHistoryToMatch")

  @@index([userId])
  @@index([sentAt])
}
